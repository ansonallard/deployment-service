// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	APIKeyScopes = "APIKey.Scopes"
)

// CreateServiceRequest defines model for CreateServiceRequest.
type CreateServiceRequest struct {
	Service ServiceInput `json:"service"`
}

// CreateServiceResponse defines model for CreateServiceResponse.
type CreateServiceResponse struct {
	Service Service `json:"service"`
}

// DockerComposePath Path to docker-compose file in service
type DockerComposePath = string

// DockerfilePath Path to Dockerfile file in service
type DockerfilePath = string

// EnvPath Path to .env file in service
type EnvPath = string

// GitConfiguration defines model for GitConfiguration.
type GitConfiguration struct {
	union json.RawMessage
}

// GitSSHURL defines model for GitSSHURL.
type GitSSHURL struct {
	SshUrl string `json:"sshUrl"`
}

// ID Resource ID - ULID
type ID = string

// NPMConfiguration defines model for NPMConfiguration.
type NPMConfiguration struct {
	Npm NPMConfigurationChoices `json:"npm"`
}

// NPMConfigurationChoices defines model for NPMConfigurationChoices.
type NPMConfigurationChoices struct {
	union json.RawMessage
}

// NPMService defines model for NPMService.
type NPMService struct {
	Service NPMServiceConfiguration `json:"service"`
}

// NPMServiceConfiguration defines model for NPMServiceConfiguration.
type NPMServiceConfiguration struct {
	// DockerComposePath Path to docker-compose file in service
	DockerComposePath DockerComposePath `json:"dockerComposePath"`

	// DockerfilePath Path to Dockerfile file in service
	DockerfilePath DockerfilePath `json:"dockerfilePath"`

	// EnvPath Path to .env file in service
	EnvPath EnvPath `json:"envPath"`
}

// Name Service Name
type Name = string

// Service defines model for Service.
type Service struct {
	// Id Resource ID - ULID
	Id ID `json:"id"`
}

// ServiceConfiguration defines model for ServiceConfiguration.
type ServiceConfiguration struct {
	union json.RawMessage
}

// ServiceInput defines model for ServiceInput.
type ServiceInput struct {
	Configuration ServiceConfiguration `json:"configuration"`
	Git           GitConfiguration     `json:"git"`

	// Name Service Name
	Name Name `json:"name"`
}

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Message *string `json:"message,omitempty"`
}

// Conflict defines model for Conflict.
type Conflict struct {
	Message *string `json:"message,omitempty"`
}

// Forbidden defines model for Forbidden.
type Forbidden struct {
	Message *string `json:"message,omitempty"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	Message *string `json:"message,omitempty"`
}

// TooManyRequests defines model for TooManyRequests.
type TooManyRequests struct {
	Message *string `json:"message,omitempty"`
}

// UnAuthorized defines model for UnAuthorized.
type UnAuthorized struct {
	Message *string `json:"message,omitempty"`
}

// CreateServiceJSONRequestBody defines body for CreateService for application/json ContentType.
type CreateServiceJSONRequestBody = CreateServiceRequest

// AsGitSSHURL returns the union data inside the GitConfiguration as a GitSSHURL
func (t GitConfiguration) AsGitSSHURL() (GitSSHURL, error) {
	var body GitSSHURL
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitSSHURL overwrites any union data inside the GitConfiguration as the provided GitSSHURL
func (t *GitConfiguration) FromGitSSHURL(v GitSSHURL) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitSSHURL performs a merge with any union data inside the GitConfiguration, using the provided GitSSHURL
func (t *GitConfiguration) MergeGitSSHURL(v GitSSHURL) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GitConfiguration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GitConfiguration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNPMService returns the union data inside the NPMConfigurationChoices as a NPMService
func (t NPMConfigurationChoices) AsNPMService() (NPMService, error) {
	var body NPMService
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNPMService overwrites any union data inside the NPMConfigurationChoices as the provided NPMService
func (t *NPMConfigurationChoices) FromNPMService(v NPMService) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNPMService performs a merge with any union data inside the NPMConfigurationChoices, using the provided NPMService
func (t *NPMConfigurationChoices) MergeNPMService(v NPMService) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NPMConfigurationChoices) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NPMConfigurationChoices) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNPMConfiguration returns the union data inside the ServiceConfiguration as a NPMConfiguration
func (t ServiceConfiguration) AsNPMConfiguration() (NPMConfiguration, error) {
	var body NPMConfiguration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNPMConfiguration overwrites any union data inside the ServiceConfiguration as the provided NPMConfiguration
func (t *ServiceConfiguration) FromNPMConfiguration(v NPMConfiguration) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNPMConfiguration performs a merge with any union data inside the ServiceConfiguration, using the provided NPMConfiguration
func (t *ServiceConfiguration) MergeNPMConfiguration(v NPMConfiguration) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ServiceConfiguration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServiceConfiguration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RXbW/bNhD+K8Kt38bYTpoNmD+tjbvOWJIZ8QIUSDOAlc42W4nUSNqoV+i/F0fqxZZk",
	"yS5a+Jte7h4+d3zuyPsCoUpSJVFaA+MvoNGkShp0L6959ID/rdFYeguVtCjdI0/TWITcCiWHH42S9M2E",
	"K0w4PaVapait8CAJGsOXSI92myKMwVgt5BKyjBVf1IePGFrI6FOEJtQiJWwYE4VA5xwyBjdKLmIRno/P",
	"Axq11iEGYcGEWGnkFueoNyLEhzyDJ1F8oXEBY/hpWO3G0P81w3b0Fm7eMMgtg8qUwR9KfxBRhPJsiasY",
	"ZAym0qKWPCaqqN9orfTZiBVcAk8m8GwyBv8odcflNq8AczaCdR4Zg0f5am1XSov/MTobr3tlgx0aZJBL",
	"lgBrqi27CI8iQQA8nu1wWfDYIKvRM965rz7yNaYyXVvHgvqF0JSZpxLjuRFQR9n+MI4n0Zuo8BPqGwIz",
	"OON2RYvsbwF9DawKImd6EXrbYCFiDIQMCnRW394CnAy7kSu7Y1DfyE033ADl5higt8JSqxfLteYeomdX",
	"lMS/FzB+6t6Gt8LO538+PtxC1pbx6veJIjCrRx27+uKWugmM4d+lsL8Pfn7/frAU9kUzxroQPEQbq+mk",
	"mc/yGJpOgovg8XY6AQYJ/3yLckn5v/qVQSLk7msjx/ezu9NyvB+0TJM+1ddXuFkpEaJpBE9QbZEf8v8+",
	"Yrif3ZVleWD1eVXd378nVPj723BKjziEcRrhqK3TdFFvtiY6HRotpR+itM4YYNU8uhyLHlNPU+HeIMJa",
	"4mvNJU+wWWnFbcr9bamib5OIiPrCnE4aEYqolfc3CeDoEqlps4OAP4BPy0NYJ33EIVpjxGApbJ9r4zzJ",
	"GMh8vzsTQDaNduWlQMuyWgTN9NCtCMO1FnY7J1Af96vZ9C/cOiWQyFbII9RQcILPFzwVF59wWymOp4I8",
	"3D1MyIVylzZhY/o3wTRW2wSlLS//d4mKMAYGG9TGK3k0uByMKHCVouSpgDG8HIwGV8Do2Fo5XsO82biX",
	"VPkrG22YC28alVPGvDy78+nstYq2P2rkyce/zG/EzoB6NRodgirtDs1PDK6P8d6ZgZ3LZb/L3u3cOb3s",
	"d9qbj65Hvx0R184Een11hEPLIPHLu3f9fm3T2q6uXRspFP307HoEXxoqlXkhp+fMexCCcQ5rujHBcHMJ",
	"2XP2NQAA//8/ZQMvhxAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
