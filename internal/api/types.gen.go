// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	APIKeyScopes = "APIKey.Scopes"
)

// CreateServiceRequest defines model for CreateServiceRequest.
type CreateServiceRequest struct {
	Service ServiceInput `json:"service"`
}

// CreateServiceResponse defines model for CreateServiceResponse.
type CreateServiceResponse struct {
	Service Service `json:"service"`
}

// DockerComposePath Path to docker-compose file in service
type DockerComposePath = string

// DockerfilePath Path to Dockerfile file in service
type DockerfilePath = string

// EnvPath Path to .env file in service
type EnvPath = string

// GitConfiguration defines model for GitConfiguration.
type GitConfiguration struct {
	SshUrl *SSHUrl `json:"sshUrl,omitempty"`
	union  json.RawMessage
}

// GitSSHURL defines model for GitSSHURL.
type GitSSHURL struct {
	SshUrl SSHUrl `json:"sshUrl"`
}

// ID Resource ID - ULID
type ID = string

// NPMConfiguration defines model for NPMConfiguration.
type NPMConfiguration struct {
	Npm NPMConfigurationChoices `json:"npm"`
}

// NPMConfigurationChoices defines model for NPMConfigurationChoices.
type NPMConfigurationChoices struct {
	Library *NPMLibraryConfiguration `json:"library,omitempty"`
	Service *NPMServiceConfiguration `json:"service,omitempty"`
	union   json.RawMessage
}

// NPMLibrary defines model for NPMLibrary.
type NPMLibrary struct {
	Library NPMLibraryConfiguration `json:"library"`
}

// NPMLibraryConfiguration defines model for NPMLibraryConfiguration.
type NPMLibraryConfiguration = map[string]interface{}

// NPMService defines model for NPMService.
type NPMService struct {
	Service NPMServiceConfiguration `json:"service"`
}

// NPMServiceConfiguration defines model for NPMServiceConfiguration.
type NPMServiceConfiguration struct {
	// DockerComposePath Path to docker-compose file in service
	DockerComposePath DockerComposePath `json:"dockerComposePath"`

	// DockerfilePath Path to Dockerfile file in service
	DockerfilePath DockerfilePath `json:"dockerfilePath"`

	// EnvPath Path to .env file in service
	EnvPath EnvPath `json:"envPath"`
}

// Name Service Name
type Name = string

// SSHUrl defines model for SSHUrl.
type SSHUrl = string

// Service defines model for Service.
type Service struct {
	// Id Resource ID - ULID
	Id ID `json:"id"`
}

// ServiceConfiguration defines model for ServiceConfiguration.
type ServiceConfiguration struct {
	Npm   *NPMConfigurationChoices `json:"npm,omitempty"`
	union json.RawMessage
}

// ServiceInput defines model for ServiceInput.
type ServiceInput struct {
	Configuration ServiceConfiguration `json:"configuration"`
	Git           GitConfiguration     `json:"git"`

	// Name Service Name
	Name Name `json:"name"`
}

// Version defines model for Version.
type Version = string

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Message *string `json:"message,omitempty"`
}

// Conflict defines model for Conflict.
type Conflict struct {
	Message *string `json:"message,omitempty"`
}

// Forbidden defines model for Forbidden.
type Forbidden struct {
	Message *string `json:"message,omitempty"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	Message *string `json:"message,omitempty"`
}

// TooManyRequests defines model for TooManyRequests.
type TooManyRequests struct {
	Message *string `json:"message,omitempty"`
}

// UnAuthorized defines model for UnAuthorized.
type UnAuthorized struct {
	Message *string `json:"message,omitempty"`
}

// CreateServiceJSONRequestBody defines body for CreateService for application/json ContentType.
type CreateServiceJSONRequestBody = CreateServiceRequest

// AsGitSSHURL returns the union data inside the GitConfiguration as a GitSSHURL
func (t GitConfiguration) AsGitSSHURL() (GitSSHURL, error) {
	var body GitSSHURL
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitSSHURL overwrites any union data inside the GitConfiguration as the provided GitSSHURL
func (t *GitConfiguration) FromGitSSHURL(v GitSSHURL) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitSSHURL performs a merge with any union data inside the GitConfiguration, using the provided GitSSHURL
func (t *GitConfiguration) MergeGitSSHURL(v GitSSHURL) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GitConfiguration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.SshUrl != nil {
		object["sshUrl"], err = json.Marshal(t.SshUrl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sshUrl': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *GitConfiguration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["sshUrl"]; found {
		err = json.Unmarshal(raw, &t.SshUrl)
		if err != nil {
			return fmt.Errorf("error reading 'sshUrl': %w", err)
		}
	}

	return err
}

// AsNPMService returns the union data inside the NPMConfigurationChoices as a NPMService
func (t NPMConfigurationChoices) AsNPMService() (NPMService, error) {
	var body NPMService
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNPMService overwrites any union data inside the NPMConfigurationChoices as the provided NPMService
func (t *NPMConfigurationChoices) FromNPMService(v NPMService) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNPMService performs a merge with any union data inside the NPMConfigurationChoices, using the provided NPMService
func (t *NPMConfigurationChoices) MergeNPMService(v NPMService) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNPMLibrary returns the union data inside the NPMConfigurationChoices as a NPMLibrary
func (t NPMConfigurationChoices) AsNPMLibrary() (NPMLibrary, error) {
	var body NPMLibrary
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNPMLibrary overwrites any union data inside the NPMConfigurationChoices as the provided NPMLibrary
func (t *NPMConfigurationChoices) FromNPMLibrary(v NPMLibrary) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNPMLibrary performs a merge with any union data inside the NPMConfigurationChoices, using the provided NPMLibrary
func (t *NPMConfigurationChoices) MergeNPMLibrary(v NPMLibrary) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NPMConfigurationChoices) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Library != nil {
		object["library"], err = json.Marshal(t.Library)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'library': %w", err)
		}
	}

	if t.Service != nil {
		object["service"], err = json.Marshal(t.Service)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'service': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *NPMConfigurationChoices) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["library"]; found {
		err = json.Unmarshal(raw, &t.Library)
		if err != nil {
			return fmt.Errorf("error reading 'library': %w", err)
		}
	}

	if raw, found := object["service"]; found {
		err = json.Unmarshal(raw, &t.Service)
		if err != nil {
			return fmt.Errorf("error reading 'service': %w", err)
		}
	}

	return err
}

// AsNPMConfiguration returns the union data inside the ServiceConfiguration as a NPMConfiguration
func (t ServiceConfiguration) AsNPMConfiguration() (NPMConfiguration, error) {
	var body NPMConfiguration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNPMConfiguration overwrites any union data inside the ServiceConfiguration as the provided NPMConfiguration
func (t *ServiceConfiguration) FromNPMConfiguration(v NPMConfiguration) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNPMConfiguration performs a merge with any union data inside the ServiceConfiguration, using the provided NPMConfiguration
func (t *ServiceConfiguration) MergeNPMConfiguration(v NPMConfiguration) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ServiceConfiguration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Npm != nil {
		object["npm"], err = json.Marshal(t.Npm)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'npm': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *ServiceConfiguration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["npm"]; found {
		err = json.Unmarshal(raw, &t.Npm)
		if err != nil {
			return fmt.Errorf("error reading 'npm': %w", err)
		}
	}

	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RYbW8itxP/Kqv537u/AySXViqvmoT0DjVJUUiqSDkqObsD+LrYe7ZBpdF+92r2CVg7",
	"u6C7iFfssjO/+c2DZ2y/QqgWiZIorYH+K8yRR6izx+sHPqPfCE2oRWKFktCHhzkGK9RGKBmoaWDnGGg0",
	"aqlDDNZqGWj8tkRjMQIGJpzjghPGB41T6MP/uhtr3fyr6f6Zo0Gapgw0mkRJgxmDSx7d53D0FippUWaP",
	"PEliEXKi1P1qiNfrlrFEqwS1FTnIAo3hM6RHu04Q+mCsFnIGZK74R718xdDmDHbdveRR6RKkDK6UnMYi",
	"PB6f+zLWYcmEWGnkFseoVyLE+yKCB1Fsyo8f3cMtFwwKyaASZb6q8lksxLqZTGbgN6VfRBShPFrANwxS",
	"BkNpUUsek4uor7VW+mjESi5BTibI2aQMHpS65XJdrBxzNIJ1HimDR3mxtHOlxb8YHY3XnbLBFg0SKEqd",
	"AGvVXnUfHkWCAHg82uIy5bFBVqNncuW2dVXYGMpkaSHvfd+WQlNkniuMieNQw3J/N44H0Ruo8G/UVwRm",
	"cMTt3B0i9G9gVRBloidhLhtMRYyBkEGJzurpLcFJsBl5I7cP6rVcNcN1UK72AfokLI0IMVtqnkO0ZEVJ",
	"/GMK/efmNHwSdjz+/Hh/A+nEyaSZP+q4NZHjzyTlWSAZ6QL9wBo61PJOBeXKvgIaDtxEVHNvOAhOgseb",
	"4QAYLPg/NyhnlLiznxkshNx+dZJzN7o9LDm77spk0eZr3cLVXIkQjeM8Qfk8f0v/x1TR3ei2Ws+sVfRG",
	"vGiu156Ki4sv/X0xdqNO/Xa/7rMhXENI/bG72RA7IK/f604ttyXcpJGjU4g+2fEmTD++tTcFd99W/xbG",
	"YYQj38Boou5OGBryzmRoh6ikUwa4mQFNiuWoqIepVHeIMI9/3ljyBbp9r9xMZ189Pa3orrRF4pY2hNCH",
	"v2bC/tr5/5cvnZmwH7xaW4UVx0XrOCBjImoL03DgREhEHr8nGzbvMTidlu92s+9s604ed7Z1hy2EsB6B",
	"PbZmTm+dCdum6uxSUgayKL/GOJCMM8vyyiSzrOaBr8zL0753724wXGph12MymMfkYjT8HbPmLKi28yMi",
	"lHzh6eQiESckUdniiaD3bOcv5FRlpoSN6dsAk1itFyhtdUy9XagIY2CwKplBr3Pa6RFZlaDkiYA+fOz0",
	"OmfAaJXNM17doi9mL4nKDwmUzMz1YVSdh8fVbrG4R7hU0fq9DufFRYV7lXLW670FVcm9ddJncL6P9tZt",
	"TaZy2q6ycx7MlD62K+2cyM97v+zh19ZdyfnZHgqeo+tPT0/ter77ge26zvpVWdHPE2pGls8MLaNxWU6T",
	"NC12SNmNyfMrLKnBQ3d1Su3yvwAAAP//jmvaA7ETAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
