// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	APIKeyScopes = "APIKey.Scopes"
)

// BranchName defines model for BranchName.
type BranchName = string

// CreateServiceRequest defines model for CreateServiceRequest.
type CreateServiceRequest struct {
	Service ServiceInput `json:"service"`
}

// CreateServiceResponse defines model for CreateServiceResponse.
type CreateServiceResponse struct {
	Service Service `json:"service"`
}

// DockerComposePath Path to docker-compose file in service
type DockerComposePath = string

// DockerfilePath Path to Dockerfile file in service
type DockerfilePath = string

// EnvPath Path to .env file in service
type EnvPath = string

// GetServiceResponse defines model for GetServiceResponse.
type GetServiceResponse struct {
	Service Service `json:"service"`
}

// GitConfiguration defines model for GitConfiguration.
type GitConfiguration struct {
	union json.RawMessage
}

// GitConfigurationOptions defines model for GitConfigurationOptions.
type GitConfigurationOptions struct {
	BranchName BranchName `json:"branchName"`
	SshUrl     SSHUrl     `json:"sshUrl"`
}

// ID Resource ID - ULID
type ID = string

// ListServicesResponse defines model for ListServicesResponse.
type ListServicesResponse struct {
	// NextToken Pagination token
	NextToken *NextToken `json:"nextToken,omitempty"`
	Services  Services   `json:"services"`
}

// NPMConfiguration defines model for NPMConfiguration.
type NPMConfiguration struct {
	Npm NPMConfigurationChoices `json:"npm"`
}

// NPMConfigurationChoices defines model for NPMConfigurationChoices.
type NPMConfigurationChoices struct {
	union json.RawMessage
}

// NPMLibrary defines model for NPMLibrary.
type NPMLibrary struct {
	Library NPMLibraryConfiguration `json:"library"`
}

// NPMLibraryConfiguration defines model for NPMLibraryConfiguration.
type NPMLibraryConfiguration = map[string]interface{}

// NPMService defines model for NPMService.
type NPMService struct {
	Service NPMServiceConfiguration `json:"service"`
}

// NPMServiceConfiguration defines model for NPMServiceConfiguration.
type NPMServiceConfiguration struct {
	// DockerComposePath Path to docker-compose file in service
	DockerComposePath DockerComposePath `json:"dockerComposePath"`

	// DockerfilePath Path to Dockerfile file in service
	DockerfilePath DockerfilePath `json:"dockerfilePath"`

	// EnvPath Path to .env file in service
	EnvPath EnvPath `json:"envPath"`
}

// Name Service Name
type Name = string

// NextToken Pagination token
type NextToken struct {
	NextToken *string `json:"nextToken,omitempty"`
}

// SSHUrl defines model for SSHUrl.
type SSHUrl = string

// Service defines model for Service.
type Service struct {
	Configuration ServiceConfiguration `json:"configuration"`
	Git           GitConfiguration     `json:"git"`

	// Id Resource ID - ULID
	Id ID `json:"id"`

	// Name Service Name
	Name Name `json:"name"`
}

// ServiceConfiguration defines model for ServiceConfiguration.
type ServiceConfiguration struct {
	union json.RawMessage
}

// ServiceInput defines model for ServiceInput.
type ServiceInput struct {
	Configuration ServiceConfiguration `json:"configuration"`
	Git           GitConfiguration     `json:"git"`

	// Name Service Name
	Name Name `json:"name"`
}

// Services defines model for Services.
type Services = []Service

// Version defines model for Version.
type Version = string

// MaxResults defines model for MaxResults.
type MaxResults = int

// NextTokenInput defines model for NextTokenInput.
type NextTokenInput = string

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Message *string `json:"message,omitempty"`
}

// Conflict defines model for Conflict.
type Conflict struct {
	Message *string `json:"message,omitempty"`
}

// Forbidden defines model for Forbidden.
type Forbidden struct {
	Message *string `json:"message,omitempty"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	Message *string `json:"message,omitempty"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	Message *string `json:"message,omitempty"`
}

// TooManyRequests defines model for TooManyRequests.
type TooManyRequests struct {
	Message *string `json:"message,omitempty"`
}

// UnAuthorized defines model for UnAuthorized.
type UnAuthorized struct {
	Message *string `json:"message,omitempty"`
}

// ListServicesParams defines parameters for ListServices.
type ListServicesParams struct {
	// MaxResults Max number of results to return when paginating
	MaxResults *MaxResults `form:"max_results,omitempty" json:"max_results,omitempty"`

	// NextToken Pagination token
	NextToken *NextTokenInput `form:"next_token,omitempty" json:"next_token,omitempty"`
}

// CreateServiceJSONRequestBody defines body for CreateService for application/json ContentType.
type CreateServiceJSONRequestBody = CreateServiceRequest

// AsGitConfigurationOptions returns the union data inside the GitConfiguration as a GitConfigurationOptions
func (t GitConfiguration) AsGitConfigurationOptions() (GitConfigurationOptions, error) {
	var body GitConfigurationOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitConfigurationOptions overwrites any union data inside the GitConfiguration as the provided GitConfigurationOptions
func (t *GitConfiguration) FromGitConfigurationOptions(v GitConfigurationOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitConfigurationOptions performs a merge with any union data inside the GitConfiguration, using the provided GitConfigurationOptions
func (t *GitConfiguration) MergeGitConfigurationOptions(v GitConfigurationOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GitConfiguration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GitConfiguration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNPMService returns the union data inside the NPMConfigurationChoices as a NPMService
func (t NPMConfigurationChoices) AsNPMService() (NPMService, error) {
	var body NPMService
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNPMService overwrites any union data inside the NPMConfigurationChoices as the provided NPMService
func (t *NPMConfigurationChoices) FromNPMService(v NPMService) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNPMService performs a merge with any union data inside the NPMConfigurationChoices, using the provided NPMService
func (t *NPMConfigurationChoices) MergeNPMService(v NPMService) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNPMLibrary returns the union data inside the NPMConfigurationChoices as a NPMLibrary
func (t NPMConfigurationChoices) AsNPMLibrary() (NPMLibrary, error) {
	var body NPMLibrary
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNPMLibrary overwrites any union data inside the NPMConfigurationChoices as the provided NPMLibrary
func (t *NPMConfigurationChoices) FromNPMLibrary(v NPMLibrary) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNPMLibrary performs a merge with any union data inside the NPMConfigurationChoices, using the provided NPMLibrary
func (t *NPMConfigurationChoices) MergeNPMLibrary(v NPMLibrary) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NPMConfigurationChoices) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NPMConfigurationChoices) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNPMConfiguration returns the union data inside the ServiceConfiguration as a NPMConfiguration
func (t ServiceConfiguration) AsNPMConfiguration() (NPMConfiguration, error) {
	var body NPMConfiguration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNPMConfiguration overwrites any union data inside the ServiceConfiguration as the provided NPMConfiguration
func (t *ServiceConfiguration) FromNPMConfiguration(v NPMConfiguration) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNPMConfiguration performs a merge with any union data inside the ServiceConfiguration, using the provided NPMConfiguration
func (t *ServiceConfiguration) MergeNPMConfiguration(v NPMConfiguration) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ServiceConfiguration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServiceConfiguration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYX2/bNhD/KgLXtzG2k3YD5qe1cdsZi10jSYcCbVYw0lliK5EqSXnxDH33gdRfS7Qk",
	"B+3cPiWC7373493x7ng75PIo5gyYkmi6QwEQD4T59+Ut8fVfD6QraKwoZ2iKbgNwNiAk5czha0cF4AiQ",
	"PBEuOFueOAK+JCAVeAgj6QYQEY3xRMAaTdFP48raOPtVjv/K0FCaphjFRJAIVE5hQR6uQSZhxm2fyII8",
	"OCyJ7kFoHiITcxR3BKhEMOefAJgTE58yoijzEUZUq31JQGwRRoxEgKYoIg8fc909wh6sSRIqND2fTLCW",
	"olESFV+U5V8YqW2sYShT4INA+ghLg7zLzMVEBZU18wcj7SMqwENTJRIY6ieDawzAg7rln4HNWZyotmdW",
	"+aE5c5QWO3B0Bg/qYyFQUchPJJXQXjNBESBjziSYKLwg3nUWY/3lcqaAmX9JHIfUNXbHn6RmsqvBxoLH",
	"IBTNQCKQkvhgs1f6lN9/AldlDPYP+IJ4RZ6hFKNLztYhdU/H57q4AG7BRLMSQBTcgNhQF65zDx5FsSsZ",
	"7OgWbpmgk0s6pSi2XXWbxVxsbGSMgVdc3FPPA3Yyh1cMUoxeg/pWXrZAW9i8BvVV/TtnCgQjocYE8VII",
	"Lk7m6YKLk5FxMjYpRldUFr6RX93vVnALOy3Xdr0ukVy94gnzTl8SGFfO2lBJMbrlfEHYNq+f8mTsmjxS",
	"jN6y54kKuKD/wum8tuTKqdHQAnlKmM4jCHODor024FsFt2xRxPOoxifhqkZ1TUIJuMFeZsp96ZnbyNpv",
	"1iCLhv6+xLhrnbejJ3wzjkfRm3H3M4hLDSZhpScXy2yhAj1keUb0zM1knTUNwaHMKdBxOzwZuBbsRq7k",
	"hqC+ZJtuuBGwzRAgexf5PuLymio941A/ESQ73g5xBm/WaPq+p4E1NN8Y90iUDjFTCB/nh/u9W9pFrnaf",
	"9UWXwVsR9rrv5g8t1fJepozr1m1HnM/amVKW6vnMOXPeXs1nyEz8V8B8nVkXv5qRv/7Zyp5D3fAIv7Fi",
	"qu99B5SC2mu50YFpJw/lnbS6a7latBLvmCPFUe9hGhYuA26lqaGGMCz0B9+Q5WpRXkncK3pF7wURW/v9",
	"qf1+nJ/CSmuY/f2gNH1VwHVzbAXWJntTFbWvXwor/O7zdJXGQxjHEfZsja+LertT6lmm1eH6IUrpFCOo",
	"elmXYtHymm4q1FtEsOV8Vl/mNXu/PBbj9TLbXbRK37Jet3oXER01r3dexCiv/nrqJEo/TNAU/e1T9fvo",
	"5w8fRj5VT2wMH5fEbjOfBpTXRh5j5FPV+8ZsNvcUI+r1ac1nWo4N6LLl2qieK9Qr9kAZR9w4ri09Dt2z",
	"wXW2ccwOG+Vi6weJ16Pj8LgQmPNSBZEcPG2WYEQIstXfxdrVevMkuImganujcTJ7z1fzP2FbLjaztUW1",
	"TXx39jymZ1qiMhVT/W3eeZStuTFFVah/m0Ec8m0ErHq/LyLugZ7hNgUzNBmdjyaaLI+BkZiiKXo6mowu",
	"dCEhKjC8xvURyAcTP50XxotzL98SlJ7bXzEfSNpKZFxbQR+aD2rSjdWszvG95enFZHIoZKXcge0HRs+G",
	"KNfWs0blvF9l7+lvlJ72K+2t4J5d/NavYVk6/PLuXb+ebR1Wz1ETxSI739+ZukJ8HdzqvtylGMVcWpJj",
	"70me7+ZBqhfc236rZW0enfZqfVB2HNj8ftfpMRmQHpe13fkPkE8prirPeKeLYHqwAFW7haPLT9Y1HlVG",
	"bMvr/zHkz/o1yi3tDxLy/L1dhC7Roygab85Repf+FwAA//8zj0ZaSR0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
