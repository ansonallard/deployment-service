// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	APIKeyScopes = "APIKey.Scopes"
)

// BranchName defines model for BranchName.
type BranchName = string

// CreateServiceRequest defines model for CreateServiceRequest.
type CreateServiceRequest struct {
	Service ServiceInput `json:"service"`
}

// CreateServiceResponse defines model for CreateServiceResponse.
type CreateServiceResponse struct {
	Service Service `json:"service"`
}

// DockerComposePath Path to docker-compose file in service
type DockerComposePath = string

// DockerfilePath Path to Dockerfile file in service
type DockerfilePath = string

// EnvPath Path to .env file in service
type EnvPath = string

// EnvVars defines model for EnvVars.
type EnvVars = map[string]interface{}

// GetServiceResponse defines model for GetServiceResponse.
type GetServiceResponse struct {
	Service Service `json:"service"`
}

// GitConfiguration defines model for GitConfiguration.
type GitConfiguration struct {
	union json.RawMessage
}

// GitConfigurationOptions defines model for GitConfigurationOptions.
type GitConfigurationOptions struct {
	BranchName BranchName `json:"branchName"`
	SshUrl     SSHUrl     `json:"sshUrl"`
}

// ID Resource ID - ULID
type ID = string

// ListServicesResponse defines model for ListServicesResponse.
type ListServicesResponse struct {
	// NextToken Pagination token
	NextToken *NextToken `json:"nextToken,omitempty"`
	Services  Services   `json:"services"`
}

// NPMConfiguration defines model for NPMConfiguration.
type NPMConfiguration struct {
	Npm NPMConfigurationChoices `json:"npm"`
}

// NPMConfigurationChoices defines model for NPMConfigurationChoices.
type NPMConfigurationChoices struct {
	union json.RawMessage
}

// NPMLibrary defines model for NPMLibrary.
type NPMLibrary struct {
	Library NPMLibraryConfiguration `json:"library"`
}

// NPMLibraryConfiguration defines model for NPMLibraryConfiguration.
type NPMLibraryConfiguration = map[string]interface{}

// NPMService defines model for NPMService.
type NPMService struct {
	Service NPMServiceConfiguration `json:"service"`
}

// NPMServiceConfiguration defines model for NPMServiceConfiguration.
type NPMServiceConfiguration struct {
	// DockerComposePath Path to docker-compose file in service
	DockerComposePath DockerComposePath `json:"dockerComposePath"`

	// DockerfilePath Path to Dockerfile file in service
	DockerfilePath DockerfilePath `json:"dockerfilePath"`

	// EnvPath Path to .env file in service
	EnvPath EnvPath `json:"envPath"`
	EnvVars EnvVars `json:"envVars"`
}

// Name Service Name
type Name = string

// NextToken Pagination token
type NextToken struct {
	NextToken *string `json:"nextToken,omitempty"`
}

// SSHUrl defines model for SSHUrl.
type SSHUrl = string

// Service defines model for Service.
type Service struct {
	Configuration ServiceConfiguration `json:"configuration"`
	Git           GitConfiguration     `json:"git"`

	// Id Resource ID - ULID
	Id ID `json:"id"`

	// Name Service Name
	Name Name `json:"name"`
}

// ServiceConfiguration defines model for ServiceConfiguration.
type ServiceConfiguration struct {
	union json.RawMessage
}

// ServiceInput defines model for ServiceInput.
type ServiceInput struct {
	Configuration ServiceConfiguration `json:"configuration"`
	Git           GitConfiguration     `json:"git"`

	// Name Service Name
	Name Name `json:"name"`
}

// Services defines model for Services.
type Services = []Service

// Version defines model for Version.
type Version = string

// MaxResults defines model for MaxResults.
type MaxResults = int

// NextTokenInput defines model for NextTokenInput.
type NextTokenInput = string

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Message *string `json:"message,omitempty"`
}

// Conflict defines model for Conflict.
type Conflict struct {
	Message *string `json:"message,omitempty"`
}

// Forbidden defines model for Forbidden.
type Forbidden struct {
	Message *string `json:"message,omitempty"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	Message *string `json:"message,omitempty"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	Message *string `json:"message,omitempty"`
}

// TooManyRequests defines model for TooManyRequests.
type TooManyRequests struct {
	Message *string `json:"message,omitempty"`
}

// UnAuthorized defines model for UnAuthorized.
type UnAuthorized struct {
	Message *string `json:"message,omitempty"`
}

// ListServicesParams defines parameters for ListServices.
type ListServicesParams struct {
	// MaxResults Max number of results to return when paginating
	MaxResults *MaxResults `form:"max_results,omitempty" json:"max_results,omitempty"`

	// NextToken Pagination token
	NextToken *NextTokenInput `form:"next_token,omitempty" json:"next_token,omitempty"`
}

// CreateServiceJSONRequestBody defines body for CreateService for application/json ContentType.
type CreateServiceJSONRequestBody = CreateServiceRequest

// AsGitConfigurationOptions returns the union data inside the GitConfiguration as a GitConfigurationOptions
func (t GitConfiguration) AsGitConfigurationOptions() (GitConfigurationOptions, error) {
	var body GitConfigurationOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitConfigurationOptions overwrites any union data inside the GitConfiguration as the provided GitConfigurationOptions
func (t *GitConfiguration) FromGitConfigurationOptions(v GitConfigurationOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitConfigurationOptions performs a merge with any union data inside the GitConfiguration, using the provided GitConfigurationOptions
func (t *GitConfiguration) MergeGitConfigurationOptions(v GitConfigurationOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GitConfiguration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GitConfiguration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNPMService returns the union data inside the NPMConfigurationChoices as a NPMService
func (t NPMConfigurationChoices) AsNPMService() (NPMService, error) {
	var body NPMService
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNPMService overwrites any union data inside the NPMConfigurationChoices as the provided NPMService
func (t *NPMConfigurationChoices) FromNPMService(v NPMService) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNPMService performs a merge with any union data inside the NPMConfigurationChoices, using the provided NPMService
func (t *NPMConfigurationChoices) MergeNPMService(v NPMService) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNPMLibrary returns the union data inside the NPMConfigurationChoices as a NPMLibrary
func (t NPMConfigurationChoices) AsNPMLibrary() (NPMLibrary, error) {
	var body NPMLibrary
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNPMLibrary overwrites any union data inside the NPMConfigurationChoices as the provided NPMLibrary
func (t *NPMConfigurationChoices) FromNPMLibrary(v NPMLibrary) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNPMLibrary performs a merge with any union data inside the NPMConfigurationChoices, using the provided NPMLibrary
func (t *NPMConfigurationChoices) MergeNPMLibrary(v NPMLibrary) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NPMConfigurationChoices) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NPMConfigurationChoices) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsNPMConfiguration returns the union data inside the ServiceConfiguration as a NPMConfiguration
func (t ServiceConfiguration) AsNPMConfiguration() (NPMConfiguration, error) {
	var body NPMConfiguration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNPMConfiguration overwrites any union data inside the ServiceConfiguration as the provided NPMConfiguration
func (t *ServiceConfiguration) FromNPMConfiguration(v NPMConfiguration) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNPMConfiguration performs a merge with any union data inside the ServiceConfiguration, using the provided NPMConfiguration
func (t *ServiceConfiguration) MergeNPMConfiguration(v NPMConfiguration) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ServiceConfiguration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServiceConfiguration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYbW/bthP/KgL/ffdnbCftBsyv1iZtZyxJgyQtCrRZwUhnia1EqiTlxTP03QeSerJE",
	"S3LQzu2rRPA9/Hh3vDv+NsjnScoZMCXRfIMiIAEI8+/LWxLqvwFIX9BUUc7QHN1G4K1ASMqZx5eeisAT",
	"IHkmfPDWPPMEfM1AKggQRtKPICHaxhMBSzRH/5vW3qb2Vzl9Z62hPM8xSokgCagCwgV5uAaZxRbbNpAL",
	"8uCxLLkHoXEIK+Yp7glQmWDe3xEwLyUhZURRFiKMqFb7moFYI4wYSQDNUUIePhW6W4ADWJIsVmh+PJth",
	"LUWTLCm/KCu+MFLrVJuhTEEIAukjXBrLG+suJSqqvZk/GOkYUQEBmiuRwdg4GbvGATyoW/4F2IKlmepG",
	"5qo4NGee0mI7js7gQX0qBWoIxYmkEjpqJikCZMqZBJOFFyS4tjnWXz5nCpj5l6RpTH3jd/pZaiSbhtlU",
	"8BSEotZIAlKSEFz+qpjy+8/gK4tg+4AvSFDWGcoxOuVsGVP/cHiuywvgl0g0KgFEwQ2IFfXhuojgXhD7",
	"isFt3YHNCnqFpFeJYtdVd3ksxKZGxjh4xcU9DQJgBwt4jSDH6DWo7xVlh2kHmtegvml8F0yBYCTWNkG8",
	"FIKLg0W6xOJZMJ5Fk2N0TmUZG/nN4+407kCn5bqh1y2Sq1c8Y8HhWwLjylsaKDlGt5xfELYu+qc8GLo2",
	"jhyjt+x5piIu6D9wuKhdcuU1YGiBoiTM5BGE+VE5XlvmOw23GlEkCKi2T+KrBtQliSXgFnpplYfKs/Bh",
	"x68dkOVA/1DZuOuct2cmfDeMe8E74/4XEKfamIQrvbk4dgsV6SUrMKJHvpX1ljQGjzKvtI676bHGtWC/",
	"5VpujNWXbNVvbgJsNdLQO2K7dScu7gnzY+TsNVV6/6FhJog9+gZxBm+WaP5hYLi1NN+Y0EmUj3FTCu8X",
	"h/utG9wHrnHXdROQ0VsRD4bv5g8t1YmeVcZN764jLs66VVS18cWZd+S9PV+cIfMaOAcW6qo7+dU8B5qf",
	"ncraNSn3iBsrN/7BN0IlqKNWOB1ZdnJX3UlnuC6vLjqFt8+R0mTwMC0PpxF3wtSmxiAs9UffkMuri+pK",
	"4kHRc3oviFi770/j9/3iFNda4/xvJ6Udq9JcP8ZOYl2yN3VT+/atsLbff56+1rjLxn6AA9dQ7IPenaJ6",
	"z+lMv2ETlXSOEdRzrk+xHIdWoxxoAxpGrB3Y0mEHOnZEpPbmzEPR77dba7m2X1pOpNM2L5s9b5Dg6OmX",
	"g3soRsXk0NssUfrBg+bor5Cq3yf///hxElL1xIXwcRfAb9fiiNbcugMYhVQNvl3bi0GOEQ2GtBZnWo6N",
	"mNAVHdWsGhqU/JLFiFvHdZXHrjs6uke3jtnjoyLMfpJ8PToPj0uBOS9VkMjRm2pljAhB1vq7pHOdN0+C",
	"nwmq1jfajvX3/GrxJ6wrwtTSITVL+f7oeUqPtETtKqX627wfKVty44qqWP92BmnM1wmwmhe4SHgAev9b",
	"lcjQbHI8mWmwPAVGUorm6OlkNjnRjYSoyOCaNtenEEz+dF2YKC6Cgn2oIrdNXe8o2lpk2qC2d+0WDekW",
	"5atrfIuUPZnNdqWsktvBqmD0bIxyg/Y1KsfDKluUglF6Oqy0Re09O/ltWMNBZvzy/v2wnotma9aoyWJZ",
	"nR/uTF8hoU5ufV/ucoxSLh3FsfXULzh/kOoFD9bfiwQustOl7EdVxw5G+Ycuj9mI8jhtcPI/QT3luO48",
	"041ugvnOBlTzEnu3Hzs1HtVGXKT4f5jyZ8MaFfv7k6S8eKuXqcv0Koqmq2OU3+X/BgAA//87fdAToR0A",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
